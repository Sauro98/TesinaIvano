BTYPE: 1
BFINAL: 1
STATIC DECODING
#ifndef GLOBAL_C
#
match (3,15) 
literal 'ine
match (11,18) 
match (3,20) 
literal 'include "constants.h"
match (4,26) 
match (3,13) 
literal 'tic long get_mask_for_length(int 
match (6,11) 
literal ');
match (9,46) 
match (4,21) 
match (4,45) 
match (6,15) 
literal '_literal
match (13,51) 
match (6,19) 
match (11,52) 
literal 'void pr
match (3,29) 
literal '_binary
match (8,55) 
literal '(unsigned
match (5,87) 
match (7,21) 
literal ',
match (21,120) 
match (4,166) 
literal '* 
match (5,195) 
literal 'ruc
match (17,128) 
literal 'and
match (7,132) 
literal 's_tree(
match (27,179) 
match (5,39) 
literal '_extra
match (3,144) 
literal 'ts(
match (5,258) 
match (6,23) 
match (4,125) 
literal '* 
match (10,28) 
match (26,71) 
literal 'di
match (4,333) 
literal 'ce
match (17,73) 
match (8,25) 
match (20,75) 
match (51,327) 
literal '{
	if(
match (7,15) 
literal ' >= 0 &&
match (8,31) 
literal ' <= 143)
match (3,37) 
literal '	return 8
match (3,104) 
literal '	else if 
match (12,56) 
literal '144
match (15,58) 
literal '255
match (12,58) 
literal '9
match (24,58) 
literal '256
match (16,58) 
literal '79
match (12,58) 
literal '7
match (25,58) 
literal '8
match (16,174) 
literal '287
match (22,174) 
match (11,21) 
literal '0
match (3,21) 
literal '}
match (11,302) 
match (58,577) 
match (5,318) 
match (3,15) 
match (4,732) 
literal ' =
match (21,743) 
match (10,619) 
literal '	
match (3,22) 
match (5,380) 
literal 'a
match (3,43) 
literal '0;a <
match (7,71) 
literal ';a++
match (5,75) 
match (5,76) 
literal 'curre
match (3,8) 
literal '= (
match (9,235) 
literal '<<  a) &
match (5,105) 
literal ') >>
match (3,262) 
match (5,59) 
literal ' - 1
match (5,92) 
literal '	
match (5,192) 
literal '(
match (7,61) 
match (5,19) 
match (3,227) 
match (6,22) 
literal 'ln(""
match (4,19) 
match (12,245) 
match (49,754) 
match (4,161) 
match (3,1044) 
literal ' DEBUG > 1
match (9,118) 
match (4,96) 
literal '\tSTART POPULATION OF LENGTHS ARRAY
match (5,131) 
literal '	#endif
match (7,312) 
match (7,98) 
literal '[288]
match (12,290) 
literal 'i
match (5,290) 
literal 'i<=
match (3,463) 
literal ';i
match (8,286) 
match (8,46) 
literal 'i]
match (7,364) 
match (23,735) 
match (9,254) 
match (28,175) 
literal 'END
match (15,145) 
match (48,221) 
literal 'B
match (3,1283) 
literal 'OUNT
match (25,222) 
literal 'bl_count[MAX_BITS
match (20,228) 
match (3,518) 
match (8,31) 
match (10,234) 
match (9,58) 
match (5,235) 
match (4,688) 
match (5,208) 
match (17,287) 
match (4,751) 
match (19,54) 
match (10,297) 
literal '] ++
match (8,62) 
literal '/*
match (14,641) 
match (3,7) 
match (11,124) 
literal ' 
match (9,645) 
match (9,247) 
match (8,225) 
literal '["<<a<<"]: 
match (3,10) 
match (9,102) 
literal 'a]
match (6,361) 
literal '*/
match (49,363) 
match (5,1226) 
literal 'co
match (3,1591) 
match (6,222) 
literal ' 
match (3,1) 
match (9,88) 
literal '0
match (8,244) 
match (4,22) 
match (5,42) 
literal 'n
match (3,1255) 
match (3,29) 
literal 'de
match (13,330) 
match (4,31) 
match (34,436) 
literal 'GENER
match (9,436) 
literal 'SMALLEST CODES FOR
match (8,676) 
match (14,162) 
match (4,92) 
match (3,302) 
literal ' 
match (5,303) 
match (4,1375) 
match (3,147) 
literal '1;
match (6,10) 
match (3,375) 
match (10,310) 
match (4,18) 
match (3,313) 
literal ' 
match (3,314) 
match (4,52) 
literal '	
match (7,213) 
literal '(
match (5,8) 
literal '+
match (10,213) 
match (4,40) 
literal '-1])
match (4,971) 
literal '1
match (7,189) 
literal '	
match (10,216) 
match (4,31) 
match (4,247) 
match (4,13) 
match (7,30) 
match (3,435) 
match (4,7) 
match (6,6) 
match (14,444) 
match (3,138) 
match (32,444) 
literal 'NEXT
match (3,446) 
literal 'DE
match (14,445) 
match (10,114) 
match (12,446) 
match (11,104) 
literal '/IT SOMEHOW TURNS TO 1024 AT THIS
match (3,773) 
literal 'I
match (3,756) 
literal 'I HAVE NO CLUE WHY
match (7,432) 
match (7,635) 
match (5,453) 
match (4,1406) 
match (10,92) 
match (45,547) 
match (6,141) 
literal 'TODO:
match (3,516) 
literal 'op through all values 
match (3,1188) 
literal ' 
match (3,2193) 
literal 'd
match (3,28) 
literal 'e
match (6,590) 
match (4,435) 
match (3,13) 
literal 'm. 
match (7,1515) 
literal 'tha
match (3,307) 
literal 'rray of
match (7,157) 
match (3,821) 
literal '8
match (40,574) 
match (14,1010) 
match (6,565) 
match (19,1007) 
match (8,682) 
match (4,1361) 
literal 'd
match (3,154) 
literal '=
match (3,691) 
literal 'w
match (5,18) 
match (8,1243) 
match (7,593) 
match (5,451) 
literal 'c_i=0;
match (3,6) 
match (7,1713) 
match (4,11) 
match (6,449) 
match (5,534) 
match (10,1305) 
match (3,72) 
match (8,336) 
match (3,35) 
match (8,71) 
match (5,612) 
match (6,18) 
match (5,105) 
match (8,466) 
match (6,43) 
match (9,38) 
match (17,25) 
match (5,1034) 
match (11,602) 
match (49,400) 
match (7,340) 
match (5,127) 
match (19,1614) 
match (32,2534) 
match (4,673) 
literal 'switc
match (9,1813) 
match (5,691) 
literal 'ca
match (3,1950) 
literal '1:
match (4,11) 
match (8,1953) 
literal 'MASK_1
match (4,732) 
match (5,1755) 
match (5,34) 
literal '2
match (18,34) 
literal '2
match (6,766) 
match (9,35) 
literal '3
match (18,35) 
literal '3
match (15,35) 
literal '4
match (18,35) 
literal '4
match (15,35) 
literal '5
match (18,35) 
literal '5
match (15,35) 
literal '6:	
match (17,36) 
literal '6
match (6,36) 
match (5,25) 
match (5,37) 
literal '7
match (18,72) 
literal '7
match (15,72) 
literal '8
match (18,35) 
literal '8
match (6,35) 
match (10,36) 
literal '9
match (18,36) 
literal '9
match (15,71) 
literal '10
match (19,318) 
literal '0
match (16,37) 
match (20,355) 
match (5,356) 
match (12,37) 
match (19,358) 
literal '1
match (16,359) 
literal '1
match (19,360) 
literal '1
match (10,361) 
match (4,1643) 
match (23,2409) 
match (61,2859) 
match (8,2730) 
match (7,794) 
literal '= 3
match (6,576) 
literal '*
match (10,36) 
match (8,1836) 
match (12,128) 
match (5,144) 
match (13,56) 
literal '4
match (55,56) 
literal '5
match (55,56) 
literal '6
match (55,56) 
literal '7
match (55,56) 
literal '8
match (55,56) 
literal '9
match (55,56) 
literal '10
match (52,57) 
match (4,3122) 
literal '1
match (5,3005) 
match (6,16) 
match (4,3178) 
literal '2
match (20,73) 
match (4,1838) 
match (9,73) 
match (10,2806) 
match (5,23) 
match (18,83) 
literal '3
match (15,83) 
match (21,493) 
match (23,83) 
literal '3
match (22,83) 
literal '5
match (15,83) 
match (21,464) 
match (23,83) 
literal '5
match (22,83) 
literal '7
match (15,83) 
match (21,435) 
match (23,83) 
match (5,3341) 
match (18,83) 
literal '9
match (14,83) 
literal '2
match (21,332) 
literal '2
match (22,83) 
match (5,3482) 
match (17,83) 
literal '2
match (15,332) 
literal '2
match (21,249) 
match (22,83) 
literal '2
match (22,332) 
literal '2
match (15,249) 
literal '3
match (21,571) 
match (23,83) 
match (22,249) 
literal '3
match (15,581) 
literal '3
match (21,498) 
match (22,83) 
literal '3
match (22,581) 
literal '3
match (15,498) 
literal '4
match (21,332) 
match (5,226) 
match (18,83) 
match (22,498) 
literal '4
match (15,332) 
literal '5
match (21,249) 
match (22,83) 
literal '4
match (22,332) 
literal '5
match (15,249) 
literal '5
match (21,581) 
match (22,83) 
literal '5
match (22,249) 
literal '5
match (15,581) 
literal '6
match (21,498) 
match (23,83) 
match (22,581) 
literal '6
match (15,498) 
literal '8
match (21,332) 
literal '4
match (21,83) 
literal '6
match (22,498) 
literal '8
match (15,332) 
literal '9
match (21,249) 
match (22,83) 
literal '8
match (22,332) 
literal '9
match (15,249) 
literal '1
match (22,1080) 
match (22,84) 
literal '9
match (22,250) 
literal '1
match (17,1081) 
match (22,750) 
match (22,85) 
match (3,62) 
match (23,1249) 
match (16,1333) 
literal '6
match (21,338) 
match (5,62) 
match (19,1251) 
match (23,1335) 
literal '6
match (16,1336) 
literal '9
match (21,257) 
match (23,86) 
literal '6
match (23,1338) 
literal '9
match (15,258) 
literal '2
match (22,1091) 
match (23,86) 
literal '9
match (22,258) 
literal '2
match (16,1093) 
literal '25
match (21,1834) 
match (22,86) 
match (3,62) 
match (21,1733) 
literal '2
match (22,831) 
match (21,1734) 
match (27,2259) 
match (50,5047) 
match (7,2263) 
match (8,32) 
match (5,1873) 
match (45,1872) 
match (12,58) 
match (21,523) 
match (37,58) 
match (46,2381) 
match (12,58) 
match (46,2383) 
match (9,58) 
match (4,1135) 
match (4,456) 
match (9,17) 
match (4,1136) 
match (33,1799) 
match (9,46) 
match (3,1137) 
match (23,86) 
match (5,542) 
match (12,86) 
match (34,1885) 
match (11,86) 
match (12,542) 
match (12,86) 
match (5,1057) 
match (12,86) 
match (22,2221) 
match (13,1640) 
match (11,87) 
match (12,1059) 
match (12,87) 
match (6,2224) 
match (13,88) 
match (34,1894) 
match (11,88) 
match (13,2228) 
match (13,89) 
match (17,263) 
literal '2
match (21,425) 
match (13,1485) 
match (12,89) 
match (24,265) 
literal '2
match (17,438) 
literal '3
match (34,1823) 
match (11,89) 
literal '2
match (24,440) 
literal '3
match (17,267) 
literal '4
match (34,1497) 
match (11,89) 
literal '3
match (24,267) 
literal '4
match (17,444) 
literal '6
match (34,1502) 
match (11,89) 
literal '4
match (24,445) 
literal '6
match (17,267) 
literal '9
match (34,1248) 
match (11,89) 
literal '6
match (24,267) 
literal '9
match (17,445) 
literal '12
match (21,268) 
match (24,90) 
literal '9
match (24,446) 
literal '12
match (18,713) 
literal '9
match (21,448) 
literal '6
match (24,537) 
literal '2
match (25,716) 
literal '9
match (17,450) 
match (3,6106) 
match (45,92) 
literal '9
match (24,452) 
match (3,1508) 
match (17,631) 
literal '8
match (21,454) 
match (5,250) 
match (21,632) 
match (24,276) 
literal '38
match (17,456) 
literal '5
match (22,990) 
match (24,92) 
match (3,66) 
match (24,1251) 
match (18,993) 
literal '76
match (21,459) 
match (5,6314) 
match (20,1255) 
match (25,995) 
literal '76
match (18,460) 
match (3,5033) 
match (44,93) 
match (3,67) 
match (24,461) 
literal '0
match (18,1001) 
literal '153
match (21,463) 
match (5,68) 
match (20,463) 
match (3,68) 
match (24,95) 
literal '53
match (18,1185) 
literal '0
match (22,1009) 
match (25,95) 
match (3,68) 
match (24,559) 
literal '0
match (18,1013) 
literal '307
match (22,3680) 
match (13,1708) 
match (12,562) 
match (3,69) 
match (24,563) 
literal '07
match (18,1198) 
literal '0
match (22,1022) 
match (25,96) 
match (4,69) 
match (24,1203) 
literal '0
match (18,1027) 
literal '6
match (3,7009) 
match (21,96) 
match (24,1739) 
match (4,69) 
match (24,1210) 
literal '14
match (17,478) 
literal '8
match (23,1033) 
match (25,96) 
match (4,69) 
match (23,96) 
match (3,76) 
match (18,1753) 
literal '2
match (3,5387) 
match (21,97) 
match (24,1757) 
match (4,70) 
match (25,1224) 
literal '28
match (18,766) 
literal '6
match (23,1044) 
match (25,98) 
match (5,71) 
match (24,99) 
match (3,78) 
match (17,293) 
literal '2457
match (22,486) 
match (25,1865) 
match (4,71) 
match (24,679) 
match (3,78) 
match (18,1240) 
literal '2
match (23,1058) 
match (25,99) 
match (5,71) 
match (12,2716) 
match (8,5557) 

#ifndef GLOBAL_C
#define GLOBAL_C

#include "constants.h"

static long get_mask_for_length(int length);
static int get_static_literal_length(int literal);
static void print_binary_literal(unsigned int literal,int length);
static long* construct_static_literal_and_lengths_tree();
static int get_static_length_extra_bits(long length,int* extra_bits);
static int get_static_distance_extra_bits(long distance,int* extra_bits);

static int get_static_literal_length(int literal){
	if(literal >= 0 && literal <= 143)
		return 8;
	else if (literal >= 144 && literal <= 255)
		return 9;
	else if (literal >= 256 && literal <= 279)
		return 7;
	else if (literal >= 280 && literal <= 287)
		return 8;
	else 
		return 0;
}

static void print_binary_literal(unsigned int literal,int length){
	int mask = get_mask_for_length(length);
	for(int a = 0;a < length;a++){
		int current = ((literal <<  a) & mask) >> (length - 1);
		print(current);
	}
	println("");
}

static long* construct_static_literal_and_lengths_tree(){
	#if DEBUG > 1
		println("\tSTART POPULATION OF LENGTHS ARRAY");
	#endif
	int lengths[288];
	for(int i = 0;i<=287;i++){
		lengths[i] = get_static_literal_length(i);
	}
	#if DEBUG > 1
		println("\tEND");
	#endif
	#if DEBUG > 1
		println("\tSTART POPULATION OF BL_COUNT ARRAY");
	#endif
	int bl_count[MAX_BITS];
	for(int i = 0;i < MAX_BITS;i++){
		bl_count[i] = 0;
	}
	for(int i = 0;i<= 287;i++){
		bl_count[lengths[i]] ++;
	}
	/*for(int a = 0; a < MAX_BITS; a++){
		println("BL_COUNT["<<a<<"]: "<<bl_count[a]);
	}*/
	#if DEBUG > 1
		println("\tEND");
	#endif
	long code = 0;
    bl_count[0] = 0;
    long next_code[MAX_BITS];
    #if DEBUG > 1
		println("\tSTART GENERATION OF SMALLEST CODES FOR LENGTHS");
	#endif
    for (int bits = 1; bits <= MAX_BITS; bits++) {
    	code = (code + bl_count[bits-1]) << 1;
    	next_code[bits] = code;
    }
    
    /*for(int a = 1; a < MAX_BITS; a++){
		println("NEXT_CODE["<<a<<"]: "<<next_code[a]);
	}*/
    
    //IT SOMEHOW TURNS TO 1024 AT THIS POINT I HAVE NO CLUE WHY
    lengths[0] = 8;
    
    #if DEBUG > 1
		println("\tEND");
	#endif
    //TODO: loop through all values and find the code for them. return that array of length 288
    #if DEBUG > 1
		println("\tSTART POPULATION OF CODES ARRAY");
	#endif
    long* codes = new long[288];
    for(int c_i=0;c_i <= 287;c_i++){
    	int length = lengths[c_i];
    	codes[c_i] = next_code[length];
    	next_code[length]++;
    }
    #if DEBUG > 1
		println("\tEND");
	#endif
    return codes;
}

static long get_mask_for_length(int length){
	switch(length){
		case 1:
			return MASK_1_BIT;
		case 2:
			return MASK_2_BITS;
		case 3:
			return MASK_3_BITS;
		case 4:
			return MASK_4_BITS;
		case 5:
			return MASK_5_BITS;
		case 6:	
			return MASK_6_BITS;	
		case 7:
			return MASK_7_BITS;
		case 8:
			return MASK_8_BITS;;
		case 9:
			return MASK_9_BITS;
		case 10:
			return MASK_10_BITS;
		case 11:
			return MASK_11_BITS;
		case 12:
			return MASK_12_BITS;
		case 13:
			return MASK_13_BITS;
	}
	return 0;
}

static int get_static_length_extra_bits(long length,int* extra_bits){
	if(length == 3){
		*extra_bits = 0;
		return 0;
	}
	if(length == 4){
		*extra_bits = 0;
		return 0;
	}
	if(length == 5){
		*extra_bits = 0;
		return 0;
	}
	if(length == 6){
		*extra_bits = 0;
		return 0;
	}
	if(length == 7){
		*extra_bits = 0;
		return 0;
	}
	if(length == 8){
		*extra_bits = 0;
		return 0;
	}
	if(length == 9){
		*extra_bits = 0;
		return 0;
	}
	if(length == 10){
		*extra_bits = 0;
		return 0;
	}
	if(length >= 11 && length <= 12){
		*extra_bits = 1;
		return length - 11;
	}
	if(length >= 13 && length <= 14){
		*extra_bits = 1;
		return length - 13;
	}
	if(length >= 15 && length <= 16){
		*extra_bits = 1;
		return length - 15;
	}
	if(length >= 17 && length <= 18){
		*extra_bits = 1;
		return length - 17;
	}
	if(length >= 19 && length <= 22){
		*extra_bits = 2;
		return length - 19;
	}
	if(length >= 23 && length <= 26){
		*extra_bits = 2;
		return length - 23;
	}
	if(length >= 27 && length <= 30){
		*extra_bits = 2;
		return length - 27;
	}
	if(length >= 31 && length <= 34){
		*extra_bits = 2;
		return length - 31;
	}
	if(length >= 35 && length <= 42){
		*extra_bits = 3;
		return length - 35;
	}
	if(length >= 43 && length <= 50){
		*extra_bits = 3;
		return length - 43;
	}
	if(length >= 51 && length <= 58){
		*extra_bits = 3;
		return length - 51;
	}
	if(length >= 59 && length <= 66){
		*extra_bits = 3;
		return length - 59;
	}
	if(length >= 67 && length <= 82){
		*extra_bits = 4;
		return length - 67;
	}
	if(length >= 83 && length <= 98){
		*extra_bits = 4;
		return length - 83;
	}
	if(length >= 99 && length <= 114){
		*extra_bits = 4;
		return length - 99;
	}
	if(length >= 115 && length <= 130){
		*extra_bits = 4;
		return length - 115;
	}
	if(length >= 131 && length <= 162){
		*extra_bits = 5;
		return length - 131;
	}
	if(length >= 163 && length <= 194){
		*extra_bits = 5;
		return length - 163;
	}
	if(length >= 195 && length <= 226){
		*extra_bits = 5;
		return length - 195;
	}
	if(length >= 227 && length <= 257){
		*extra_bits = 5;
		return length - 227;
	}
	if(length == 258){
		*extra_bits = 0;
		return 0;
	}
}

static int get_static_distance_extra_bits(long distance,int* extra_bits){
	if(distance == 1){
		*extra_bits = 0;
		return 0;
	}
	if(distance == 2){
		*extra_bits = 0;
		return 0;
	}
	if(distance == 3){
		*extra_bits = 0;
		return 0;
	}
	if(distance == 4){
		*extra_bits = 0;
		return 0;
	}
	if(distance >= 5 && distance <= 6){
		*extra_bits = 1;
		return distance - 5;
	}
	if(distance >= 7 && distance <= 8){
		*extra_bits = 1;
		return distance - 7;
	}
	if(distance >= 9 && distance <= 12){
		*extra_bits = 2;
		return distance - 9;
	}
	if(distance >= 13 && distance <= 16){
		*extra_bits = 2;
		return distance - 13;
	}
	if(distance >= 17 && distance <= 24){
		*extra_bits = 3;
		return distance - 17;
	}
	if(distance >= 25 && distance <= 32){
		*extra_bits = 3;
		return distance - 25;
	}
	if(distance >= 33 && distance <= 48){
		*extra_bits = 4;
		return distance - 33;
	}
	if(distance >= 49 && distance <= 64){
		*extra_bits = 4;
		return distance - 49;
	}
	if(distance >= 65 && distance <= 96){
		*extra_bits = 5;
		return distance - 65;
	}
	if(distance >= 97 && distance <= 128){
		*extra_bits = 5;
		return distance - 97;
	}
	if(distance >= 129 && distance <= 192){
		*extra_bits = 6;
		return distance - 129;
	}
	if(distance >= 193 && distance <= 256){
		*extra_bits = 6;
		return distance - 193;
	}
	if(distance >= 257 && distance <= 384){
		*extra_bits = 7;
		return distance - 257;
	}
	if(distance >= 385 && distance <= 512){
		*extra_bits = 7;
		return distance - 385;
	}
	if(distance >= 513 && distance <= 768){
		*extra_bits = 8;
		return distance - 513;
	}
	if(distance >= 769 && distance <= 1024){
		*extra_bits = 8;
		return distance - 769;
	}
	if(distance >= 1025 && distance <= 1536){
		*extra_bits = 9;
		return distance - 1025;
	}
	if(distance >= 1537 && distance <= 2048){
		*extra_bits = 9;
		return distance - 1537;
	}
	if(distance >= 2049 && distance <= 3072){
		*extra_bits = 10;
		return distance - 2049;
	}
	if(distance >= 3073 && distance <= 4096){
		*extra_bits = 10;
		return distance - 3073;
	}
	if(distance >= 4097 && distance <= 6144){
		*extra_bits = 11;
		return distance - 4097;
	}
	if(distance >= 6145 && distance <= 8192){
		*extra_bits = 11;
		return distance - 6145;
	}
	if(distance >= 8193 && distance <= 12288){
		*extra_bits = 12;
		return distance - 8193;
	}
	if(distance >= 12289 && distance <= 16384){
		*extra_bits = 12;
		return distance - 12289;
	}
	if(distance >= 16385 && distance <= 24576){
		*extra_bits = 13;
		return distance - 16385;
	}
	if(distance >= 24577 && distance <= 32768){
		*extra_bits = 13;
		return distance - 24577;
	}
}

#endif
